plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'taz.amin.microservices.core.review'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

//build a layered jar
bootJar {
	layered {
		enabled = true
	}
}

ext {
	mapstructVersion = "1.6.0"
	springCloudVersion = "2022.0.1"
}

dependencies {
	implementation project(':api')
	implementation project(':util')
	//mapstruct for mapping API model classes to database entity objects and vice versa
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"

	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	//mysql spring-data project
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	//jdbc driver
	implementation 'com.mysql:mysql-connector-j'
	//test containers for integration tests
	implementation platform('org.testcontainers:testcontainers-bom:1.17.6')
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation('org.testcontainers:mysql')

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
